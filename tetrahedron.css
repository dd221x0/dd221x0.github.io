@keyframes rotation {
    from, to {
        transform: rotateX(0) rotateY(0deg) rotateZ(0);
    }
    25% {
        transform: rotateX(180deg) rotateY(0deg) rotateZ(180deg);
    }
    50% {
        transform: rotateX(180deg) rotateY(180deg) rotateZ(0deg);
    }
    75% {
        transform: rotateX(0deg) rotateY(180deg) rotateZ(180deg);
    }
}

#tetrahedron {
    --box-size: 300px;
    --negative-box-size: -300px;
    --half-box-size: 150px;

    position: absolute;
    width: var(--box-size);
    height: var(--box-size);
    top: 50%;
    left: 50%;
    margin-top: -238.76275643042055px;
    margin-left: -150px;
    background: transparent;

    transform-origin: 50% 79.58758547680685% -86.60254037844386px;
    animation-name: rotation;
    animation-timing-function: ease-in-out;
    transform-style: preserve-3d;
    animation-iteration-count: infinite;
    animation-duration: 16s;
}

#tetrahedron .side {
    position: fixed;
    top: 0;
    width: 0;
    height: 0;

    transform-style: preserve-3d;

    transition:
        transform 1s 0.02s ease;
    -webkit-transition:
        transform 1s 0.02s ease;
    -moz-transition:
        transform 1s 0.02s ease;

    --PI: 3.141592653589793rad;
    --half-PI: 1.5707963267948966rad;
    --edges-angle: 0.3398369094541218rad;
    --right-corner-angle: 2.0943951023931957rad;
    --left-corner-angle: -2.0943951023931957rad;

    --disassemble-range: 61.23724356957945px;
    --triangle-center-distance: 213.39745962155615px;
}

#tetrahedron .triangle {
    clip-path: polygon(50% 13.397459621556166%, 100% 100%, 0% 100%);
    background:#000000;
    width: var(--box-size);
    height: var(--box-size);

    transform-origin: var(--half-box-size) var(--triangle-center-distance);

    transition:
        background-color 1s 0.02s ease,
        transform 1s 0.02s ease,
        opacity 1s 0.02s ease,
        box-shadow 1s 0.02s ease;
    -webkit-transition:
        background-color 1s 0.02s ease,
        transform 1s 0.02s ease,
        opacity 1s 0.02s ease,
        box-shadow 1s 0.02s ease;
    -moz-transition:
        background-color 1s 0.02s ease,
        transform 1s 0.02s ease,
        opacity 1s 0.02s ease,
        box-shadow 1s 0.02s ease;
}

#tetrahedron.disassembled .triangle {
    opacity: 0.92;

    transform-origin: var(--half-box-size) var(--triangle-center-distance);
    transform: translateZ(var(--disassemble-range));

    transition:
        background-color 1s 0.02s ease,
        transform 1s 0.02s ease,
        opacity 1s 0.02s ease,
        box-shadow 1s 0.02s ease;
    -webkit-transition:
        background-color 1s 0.02s ease,
        transform 1s 0.02s ease,
        opacity 1s 0.02s ease,
        box-shadow 1s 0.02s ease;
    -moz-transition:
        background-color 1s 0.02s ease,
        transform 1s 0.02s ease,
        opacity 1s 0.02s ease,
        box-shadow 1s 0.02s ease;
}

#tetrahedron.octahedron .triangle {
    opacity: 0.92;

    transform-origin: var(--half-box-size) var(--triangle-center-distance);
    transform: translateZ(var(--disassemble-range))
        rotateZ(var(--PI));

    transition:
        background-color 1s 0.02s ease,
        transform 0.2s 0.02s ease,
        opacity 0.2s 0.02s ease,
        box-shadow 0.2s 0.02s ease;
    -webkit-transition:
        background-color 1s 0.02s ease,
        transform 0.2s 0.02s ease,
        opacity 0.2s 0.02s ease,
        box-shadow 0.2s 0.02s ease;
    -moz-transition:
        background-color 1s 0.02s ease,
        transform 0.2s 0.02s ease,
        opacity 0.2s 0.02s ease,
        box-shadow 0.2s 0.02s ease;
}

#bottom {
    transform-origin: var(--half-box-size) var(--box-size);
    transform: rotateX(var(--half-PI))
        rotateY(var(--PI));
}

#front {
    transform-origin: var(--half-box-size) var(--box-size);
    transform: rotateX(var(--edges-angle));
}

#right {
    transform-origin: var(--box-size) var(--box-size);
    transform: rotateY(var(--right-corner-angle))
        translateX(var(--box-size))
        rotateX(var(--edges-angle));
}

#left {
    transform-origin: 0px var(--box-size);
    transform: rotateY(var(--left-corner-angle))
        translateX(var(--negative-box-size))
        rotateX(var(--edges-angle));
}
